// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id            String          @id @default(uuid())
  name          String
  userId        String
  billboard     Billboard[]     @relation("StoreToBillboards")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categories    Category[]      @relation("StoreToCategory")
  CurrentRating CurrentRating[] @relation("StoreToCurrentRating")
  Poles         Poles[]         @relation("StoreToPoles")
  Products      Product[]       @relation("StoreToProducts")
  Brand         Brand[]         @relation("StoreToBrand")
  User          User[]          @relation("StoreToUser")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboards", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  Brand      Brand[]    @relation("BrandToBillboard")

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("CategoryToProducts")

  @@index([storeId])
  @@index([billboardId])
}

model Brand {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("BrandToBillboard", fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product[] @relation("BrandToProducts")

  @@index([storeId])
  @@index([billboardId])
}

model CurrentRating {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCurrentRating", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Products  Product[]

  @@index([storeId])
}

model Poles {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToPoles", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id              String        @id @default(uuid())
  storeId         String
  store           Store         @relation("StoreToProducts", fields: [storeId], references: [id])
  categoryId      String
  category        Category      @relation("CategoryToProducts", fields: [categoryId], references: [id])
  brand           Brand         @relation("BrandToProducts", fields: [brandId], references: [id])
  brandId         String
  name            String
  description     String
  mPrice          Decimal
  gstRate         Decimal
  price           Decimal
  slug            String?
  isFeatured      Boolean       @default(false)
  isArchived      Boolean       @default(false)
  currentRatingId String
  currentRating   CurrentRating @relation(fields: [currentRatingId], references: [id])
  poles           Poles         @relation(fields: [polesId], references: [id])
  polesId         String
  images          Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([currentRatingId])
  @@index([polesId])
  @@index([brandId])
}

model Image {
  id         String   @id @default(uuid())
  productsId String
  product    Product  @relation(fields: [productsId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productsId])
}

model Order {
  id             String  @id @default(uuid())
  customOrderId  String  @unique
  storeId        String
  shippingMethod String
  gstInvoice     Boolean
  userEmail      String
  mobile         String
  altMobile      String
  pincode        String?
  state          String?
  city           String?
  country        String?
  address        String?
  landmark       String?

  gstNumber       String?
  businessName    String?
  businessPhone   String?
  billingAddress  String?
  billingCity     String?
  billingState    String?
  billingCountry  String?
  billingPincode  String?
  billingLandmark String?

  amount   Float
  tax      Float
  shipping Float
  total    Float

  items CartItem[]

  createdAt DateTime @default(now())
}

model CartItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  name      String
  image     String
  price     Float
  quantity  Int
  stock     Int

  order Order @relation(fields: [orderId], references: [id])
}

model User {
  id              String    @id @default(uuid())
  storeId         String
  store           Store     @relation("StoreToUser", fields: [storeId], references: [id])
  name            String?
  email           String?   @unique
  email_otp       String?
  email_otp_exp   DateTime?
  verified_email  Boolean   @default(false)
  password        String?
  googleId        String?   @unique
  phoneNumber     String?   @unique
  phone_otp       String?
  phone_otp_exp   DateTime?
  isPhoneVerified Boolean   @default(false)
  picture         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([storeId])
}

enum PaymentMethod {
  BANK_TRANSFER
  PHONEPE
  COD
}
