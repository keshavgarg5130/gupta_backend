generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id            String          @id @default(uuid())
  name          String
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  billboard     Billboard[]     @relation("StoreToBillboards")
  Brand         Brand[]         @relation("StoreToBrand")
  categories    Category[]      @relation("StoreToCategory")
  CurrentRating CurrentRating[] @relation("StoreToCurrentRating")
  Poles         Poles[]         @relation("StoreToPoles")
  Products      Product[]       @relation("StoreToProducts")
  User          User[]          @relation("StoreToUser")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboards", fields: [storeId], references: [id])
  Brand      Brand[]    @relation("BrandToBillboard")
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products    Product[] @relation("CategoryToProducts")

  @@index([storeId])
  @@index([billboardId])
}

model Brand {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboard   Billboard @relation("BrandToBillboard", fields: [billboardId], references: [id])
  store       Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  product     Product[] @relation("BrandToProducts")

  @@index([storeId])
  @@index([billboardId])
}

model CurrentRating {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToCurrentRating", fields: [storeId], references: [id])
  Products  Product[]

  @@index([storeId])
}

model Poles {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToPoles", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Product {
  id              String        @id @default(uuid())
  storeId         String
  categoryId      String
  name            String
  mPrice          Decimal
  gstRate         Decimal
  price           Decimal
  isFeatured      Boolean       @default(false)
  isArchived      Boolean       @default(false)
  currentRatingId String
  polesId         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  brandId         String
  description     String
  slug            String?
  images          Image[]
  brand           Brand         @relation("BrandToProducts", fields: [brandId], references: [id])
  category        Category      @relation("CategoryToProducts", fields: [categoryId], references: [id])
  currentRating   CurrentRating @relation(fields: [currentRatingId], references: [id])
  poles           Poles         @relation(fields: [polesId], references: [id])
  store           Store         @relation("StoreToProducts", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([currentRatingId])
  @@index([polesId])
  @@index([brandId])
}

model Image {
  id         String   @id @default(uuid())
  productsId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productsId], references: [id], onDelete: Cascade)

  @@index([productsId])
}

model Order {
  id              String     @id @default(uuid())
  storeId         String
  address         String?
  createdAt       DateTime   @default(now())
  altMobile       String
  amount          Float
  billingAddress  String?
  billingCity     String?
  billingCountry  String?
  billingLandmark String?
  billingPincode  String?
  billingState    String?
  businessName    String?
  businessPhone   String?
  city            String?
  country         String?
  gstInvoice      Boolean
  gstNumber       String?
  landmark        String?
  mobile          String
  pincode         String?
  shipping        Float
  shippingMethod  String
  state           String?
  tax             Float
  total           Float
  customOrderId   String     @unique
  userEmail       String
  items           CartItem[]
}

model CartItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  name      String
  image     String
  price     Float
  quantity  Int
  order     Order  @relation(fields: [orderId], references: [id])
}

model User {
  id              String    @id @default(uuid())
  storeId         String
  name            String?
  email           String?   @unique
  password        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  googleId        String?   @unique
  isPhoneVerified Boolean   @default(false)
  phoneNumber     String?   @unique
  picture         String?
  verified_email  Boolean   @default(false)
  email_otp       String?
  phone_otp       String?
  email_otp_exp   DateTime?
  phone_otp_exp   DateTime?
  store           Store     @relation("StoreToUser", fields: [storeId], references: [id])

  @@index([storeId])
}

enum PaymentMethod {
  BANK_TRANSFER
  PHONEPE
  COD
}
